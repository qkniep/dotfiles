env:
  TERM: xterm-256color # Default alacritty

scrolling:
  history: 100000
  multiplier: 3

font:
  normal:
    family: monospace
    style: Regular

  bold:
    family: monospace
    style: Bold

  italic:
    family: monospace
    style: Italic

  bold_italic:
    family: monospace
    style: Bold Italic

  size: 11.0

  offset:
    x: 0
    y: 0

schemes:
  # Srcery: https://srcery-colors.github.io/
  srcery: &dark
    primary:
      background: '#1c1b19'
      foreground: '#fce8c3'
    normal:
      black:   '#1c1b19'
      red:     '#ef2f27'
      green:   '#519f50'
      yellow:  '#fbb829'
      blue:    '#2c78bf'
      magenta: '#e02c6d'
      cyan:    '#0aaeb3'
      white:   '#baa67f'
    bright:
      black:   '#918175'
      red:     '#f75341'
      green:   '#98bc37'
      yellow:  '#fed06e'
      blue:    '#68a8e4'
      magenta: '#ff5c8f'
      cyan:    '#2be4d0'
      white:   '#fce8c3'
  # Srcery Light (experimental): adapted from https://srcery-colors.github.io/
  # Currently only fg/bg are swapped.
  srcery_light:
    primary:
      background: '#fce8c3'
      foreground: '#1c1b19'
    normal:
      black:   '#1c1b19'
      red:     '#ef2f27'
      green:   '#519f50'
      yellow:  '#fbb829'
      blue:    '#2c78bf'
      magenta: '#e02c6d'
      cyan:    '#0aaeb3'
      white:   '#baa67f'
    bright:
      black:   '#918175'
      red:     '#f75341'
      green:   '#98bc37'
      yellow:  '#fed06e'
      blue:    '#68a8e4'
      magenta: '#ff5c8f'
      cyan:    '#2be4d0'
      white:   '#fce8c3'
  # TokyoNight (Storm)
  tokyonight_storm:
    primary:
      background: '#24283b'
      foreground: '#c0caf5'
    normal:
      black:   '#1D202F'
      red:     '#f7768e'
      green:   '#9ece6a'
      yellow:  '#e0af68'
      blue:    '#7aa2f7'
      magenta: '#bb9af7'
      cyan:    '#7dcfff'
      white:   '#a9b1d6'
    bright:
      black:   '#414868'
      red:     '#f7768e'
      green:   '#9ece6a'
      yellow:  '#e0af68'
      blue:    '#7aa2f7'
      magenta: '#bb9af7'
      cyan:    '#7dcfff'
      white:   '#c0caf5'
    indexed_colors:
      - { index: 16, color: '#ff9e64' }
      - { index: 17, color: '#db4b4b' }
  # Ayu Light (https://github.com/dempfi/ayu)
  ayu_light: &light
    primary:
      background: '#fafafa'
      foreground: '#5c6773'
    normal:
      black:   '#fafafa'
      red:     '#f07178'
      green:   '#86b300'
      yellow:  '#ff6a00'
      blue:    '#36a3d9'
      magenta: '#a37acc'
      cyan:    '#4cbf99'
      white:   '#ffffff'
    bright:
      black:   '#828c99'
      red:     '#ff3333'
      green:   '#86b300'
      yellow:  '#ff6a00'
      blue:    '#36a3d9'
      magenta: '#a37acc'
      cyan:    '#4cbf99'
      white:   '#abb0b6'

colors: *dark

bell:
  animation: EaseOutExpo # Ease, EaseOut(Sine|Quad|Cubic|Quart|Quint|Expo|Circ), Linear
  duration: 250
  color: '#918175'

selection:
  #semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"
  save_to_clipboard: true

window:
  dynamic_title: true
  #opacity: 0.8

cursor:
  #style: Block
  #vi_mode_style: Block
  unfocused_hollow: true

live_config_reload: true
working_directory: None
alt_send_esc: true

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  hide_when_typing: true

  hints:
    launcher:
      program: xdg-open
      args: []

    modifiers: None

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }
  # Key bindings
  #
  # Key bindings are specified as a list of objects. For example, this is the
  # default paste binding:
  #
  # `- { key: V, mods: Control|Shift, action: Paste }`
  #
  # Each key binding will specify a:
  #
  # - `key`: Identifier of the key pressed
  #
  #    - A-Z
  #    - F1-F24
  #    - Key0-Key9
  #
  #    A full list with available key codes can be found here:
  #    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
  #
  #    Instead of using the name of the keys, the `key` field also supports using
  #    the scancode of the desired key. Scancodes have to be specified as a
  #    decimal number. This command will allow you to display the hex scancodes
  #    for certain keys:
  #
  #       `showkey --scancodes`.
  #
  # Then exactly one of:
  #
  # - `chars`: Send a byte sequence to the running application
  #
  #    The `chars` field writes the specified string to the terminal. This makes
  #    it possible to pass escape sequences. To find escape codes for bindings
  #    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
  #    of tmux. Note that applications use terminfo to map escape sequences back
  #    to keys. It is therefore required to update the terminfo when changing an
  #    escape sequence.
  #
  # - `action`: Execute a predefined action
  #
  #   - Copy
  #   - Paste
  #   - PasteSelection
  #   - IncreaseFontSize
  #   - DecreaseFontSize
  #   - ResetFontSize
  #   - ScrollPageUp
  #   - ScrollPageDown
  #   - ScrollLineUp
  #   - ScrollLineDown
  #   - ScrollToTop
  #   - ScrollToBottom
  #   - ClearHistory
  #   - Hide
  #   - Minimize
  #   - Quit
  #   - ToggleFullscreen
  #   - SpawnNewInstance
  #   - ClearLogNotice
  #   - ReceiveChar
  #   - None
  #
  # - `command`: Fork and execute a specified command plus arguments
  #
  #    The `command` field must be a map containing a `program` string and an
  #    `args` array of command line parameter strings. For example:
  #       `{ program: "alacritty", args: ["-e", "vttest"] }`
  #
  # And optionally:
  #
  # - `mods`: Key modifiers to filter binding actions
  #
  #    - Command
  #    - Control
  #    - Option
  #    - Super
  #    - Shift
  #    - Alt
  #
  #    Multiple `mods` can be combined using `|` like this:
  #       `mods: Control|Shift`.
  #    Whitespace and capitalization are relevant and must match the example.
  #
  # - `mode`: Indicate a binding for only specific terminal reported modes
  #
  #    This is mainly used to send applications the correct escape sequences
  #    when in different modes.
  #
  #    - AppCursor
  #    - AppKeypad
  #    - Alt
  #
  #    A `~` operator can be used before a mode to apply the binding whenever
  #    the mode is *not* active, e.g. `~Alt`.
  #
  # Bindings are always filled by default, but will be replaced when a new
  # binding with the same triggers is defined. To unset a default binding, it can
  # be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
  # a no-op if you do not wish to receive input characters for that binding.
  #
  # If the same trigger is assigned to multiple actions, all of them are executed
  # at once.
  #key_bindings:
  # (Windows, Linux, and BSD only)
  #- { key: V,        mods: Control|Shift, action: Paste            }
  #- { key: C,        mods: Control|Shift, action: Copy             }
  #- { key: Insert,   mods: Shift,         action: PasteSelection   }
  #- { key: Key0,     mods: Control,       action: ResetFontSize    }
  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
  #- { key: Add,      mods: Control,       action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }
  # (macOS only)
  #- { key: Key0,   mods: Command,         action: ResetFontSize    }
  #- { key: Equals, mods: Command,         action: IncreaseFontSize }
  #- { key: Add,    mods: Command,         action: IncreaseFontSize }
  #- { key: Minus,  mods: Command,         action: DecreaseFontSize }
  #- { key: K,      mods: Command,         action: ClearHistory     }
  #- { key: K,      mods: Command,         chars: "\x0c"            }
  #- { key: V,      mods: Command,         action: Paste            }
  #- { key: C,      mods: Command,         action: Copy             }
  #- { key: H,      mods: Command,         action: Hide             }
  #- { key: M,      mods: Command,         action: Minimize         }
  #- { key: Q,      mods: Command,         action: Quit             }
  #- { key: W,      mods: Command,         action: Quit             }
  #- { key: F,      mods: Command|Control, action: ToggleFullscreen }
  #- { key: Paste,                    action: Paste                            }
  #- { key: Copy,                     action: Copy                             }
  #- { key: L,         mods: Control, action: ClearLogNotice                   }
  #- { key: L,         mods: Control, chars: "\x0c"                            }
  #- { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  #- { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  #- { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
  #- { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }
